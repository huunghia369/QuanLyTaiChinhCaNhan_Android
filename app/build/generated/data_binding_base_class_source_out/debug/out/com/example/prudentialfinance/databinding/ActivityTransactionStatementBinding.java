// Generated by view binder compiler. Do not edit!
package com.example.prudentialfinance.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.ScrollView;
import android.widget.Spinner;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatButton;
import androidx.appcompat.widget.AppCompatSpinner;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.prudentialfinance.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityTransactionStatementBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final AppCompatButton buttonCreateStatement;

  @NonNull
  public final ImageButton buttonGoBack;

  @NonNull
  public final AppCompatButton buttonPreviewStatement;

  @NonNull
  public final EditText fromDate;

  @NonNull
  public final EditText length;

  @NonNull
  public final EditText search;

  @NonNull
  public final AppCompatSpinner sortByColumnSpinner;

  @NonNull
  public final Spinner sortByNatureSpinner;

  @NonNull
  public final LinearLayout titleAndButtonBack;

  @NonNull
  public final EditText toDate;

  @NonNull
  public final ScrollView transactionCreationContent;

  private ActivityTransactionStatementBinding(@NonNull LinearLayout rootView,
      @NonNull AppCompatButton buttonCreateStatement, @NonNull ImageButton buttonGoBack,
      @NonNull AppCompatButton buttonPreviewStatement, @NonNull EditText fromDate,
      @NonNull EditText length, @NonNull EditText search,
      @NonNull AppCompatSpinner sortByColumnSpinner, @NonNull Spinner sortByNatureSpinner,
      @NonNull LinearLayout titleAndButtonBack, @NonNull EditText toDate,
      @NonNull ScrollView transactionCreationContent) {
    this.rootView = rootView;
    this.buttonCreateStatement = buttonCreateStatement;
    this.buttonGoBack = buttonGoBack;
    this.buttonPreviewStatement = buttonPreviewStatement;
    this.fromDate = fromDate;
    this.length = length;
    this.search = search;
    this.sortByColumnSpinner = sortByColumnSpinner;
    this.sortByNatureSpinner = sortByNatureSpinner;
    this.titleAndButtonBack = titleAndButtonBack;
    this.toDate = toDate;
    this.transactionCreationContent = transactionCreationContent;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityTransactionStatementBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityTransactionStatementBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_transaction_statement, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityTransactionStatementBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.buttonCreateStatement;
      AppCompatButton buttonCreateStatement = ViewBindings.findChildViewById(rootView, id);
      if (buttonCreateStatement == null) {
        break missingId;
      }

      id = R.id.buttonGoBack;
      ImageButton buttonGoBack = ViewBindings.findChildViewById(rootView, id);
      if (buttonGoBack == null) {
        break missingId;
      }

      id = R.id.buttonPreviewStatement;
      AppCompatButton buttonPreviewStatement = ViewBindings.findChildViewById(rootView, id);
      if (buttonPreviewStatement == null) {
        break missingId;
      }

      id = R.id.fromDate;
      EditText fromDate = ViewBindings.findChildViewById(rootView, id);
      if (fromDate == null) {
        break missingId;
      }

      id = R.id.length;
      EditText length = ViewBindings.findChildViewById(rootView, id);
      if (length == null) {
        break missingId;
      }

      id = R.id.search;
      EditText search = ViewBindings.findChildViewById(rootView, id);
      if (search == null) {
        break missingId;
      }

      id = R.id.sortByColumnSpinner;
      AppCompatSpinner sortByColumnSpinner = ViewBindings.findChildViewById(rootView, id);
      if (sortByColumnSpinner == null) {
        break missingId;
      }

      id = R.id.sortByNatureSpinner;
      Spinner sortByNatureSpinner = ViewBindings.findChildViewById(rootView, id);
      if (sortByNatureSpinner == null) {
        break missingId;
      }

      id = R.id.titleAndButtonBack;
      LinearLayout titleAndButtonBack = ViewBindings.findChildViewById(rootView, id);
      if (titleAndButtonBack == null) {
        break missingId;
      }

      id = R.id.toDate;
      EditText toDate = ViewBindings.findChildViewById(rootView, id);
      if (toDate == null) {
        break missingId;
      }

      id = R.id.transactionCreationContent;
      ScrollView transactionCreationContent = ViewBindings.findChildViewById(rootView, id);
      if (transactionCreationContent == null) {
        break missingId;
      }

      return new ActivityTransactionStatementBinding((LinearLayout) rootView, buttonCreateStatement,
          buttonGoBack, buttonPreviewStatement, fromDate, length, search, sortByColumnSpinner,
          sortByNatureSpinner, titleAndButtonBack, toDate, transactionCreationContent);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
