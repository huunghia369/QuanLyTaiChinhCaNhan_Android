// Generated by view binder compiler. Do not edit!
package com.example.prudentialfinance.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.ScrollView;
import android.widget.Spinner;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatButton;
import androidx.appcompat.widget.AppCompatSpinner;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.prudentialfinance.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityTransactionUpdateBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final Spinner transactionUpdateAccountSpinner;

  @NonNull
  public final EditText transactionUpdateAmount;

  @NonNull
  public final ImageButton transactionUpdateButtonGoBack;

  @NonNull
  public final AppCompatButton transactionUpdateButtonSave;

  @NonNull
  public final AppCompatSpinner transactionUpdateCategorySpinner;

  @NonNull
  public final ScrollView transactionUpdateContent;

  @NonNull
  public final EditText transactionUpdateDate;

  @NonNull
  public final EditText transactionUpdateDescription;

  @NonNull
  public final EditText transactionUpdateName;

  @NonNull
  public final EditText transactionUpdateReference;

  @NonNull
  public final LinearLayout transactionUpdateTitleAndButtonBack;

  private ActivityTransactionUpdateBinding(@NonNull RelativeLayout rootView,
      @NonNull Spinner transactionUpdateAccountSpinner, @NonNull EditText transactionUpdateAmount,
      @NonNull ImageButton transactionUpdateButtonGoBack,
      @NonNull AppCompatButton transactionUpdateButtonSave,
      @NonNull AppCompatSpinner transactionUpdateCategorySpinner,
      @NonNull ScrollView transactionUpdateContent, @NonNull EditText transactionUpdateDate,
      @NonNull EditText transactionUpdateDescription, @NonNull EditText transactionUpdateName,
      @NonNull EditText transactionUpdateReference,
      @NonNull LinearLayout transactionUpdateTitleAndButtonBack) {
    this.rootView = rootView;
    this.transactionUpdateAccountSpinner = transactionUpdateAccountSpinner;
    this.transactionUpdateAmount = transactionUpdateAmount;
    this.transactionUpdateButtonGoBack = transactionUpdateButtonGoBack;
    this.transactionUpdateButtonSave = transactionUpdateButtonSave;
    this.transactionUpdateCategorySpinner = transactionUpdateCategorySpinner;
    this.transactionUpdateContent = transactionUpdateContent;
    this.transactionUpdateDate = transactionUpdateDate;
    this.transactionUpdateDescription = transactionUpdateDescription;
    this.transactionUpdateName = transactionUpdateName;
    this.transactionUpdateReference = transactionUpdateReference;
    this.transactionUpdateTitleAndButtonBack = transactionUpdateTitleAndButtonBack;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityTransactionUpdateBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityTransactionUpdateBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_transaction_update, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityTransactionUpdateBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.transactionUpdateAccountSpinner;
      Spinner transactionUpdateAccountSpinner = ViewBindings.findChildViewById(rootView, id);
      if (transactionUpdateAccountSpinner == null) {
        break missingId;
      }

      id = R.id.transactionUpdateAmount;
      EditText transactionUpdateAmount = ViewBindings.findChildViewById(rootView, id);
      if (transactionUpdateAmount == null) {
        break missingId;
      }

      id = R.id.transactionUpdateButtonGoBack;
      ImageButton transactionUpdateButtonGoBack = ViewBindings.findChildViewById(rootView, id);
      if (transactionUpdateButtonGoBack == null) {
        break missingId;
      }

      id = R.id.transactionUpdateButtonSave;
      AppCompatButton transactionUpdateButtonSave = ViewBindings.findChildViewById(rootView, id);
      if (transactionUpdateButtonSave == null) {
        break missingId;
      }

      id = R.id.transactionUpdateCategorySpinner;
      AppCompatSpinner transactionUpdateCategorySpinner = ViewBindings.findChildViewById(rootView, id);
      if (transactionUpdateCategorySpinner == null) {
        break missingId;
      }

      id = R.id.transactionUpdateContent;
      ScrollView transactionUpdateContent = ViewBindings.findChildViewById(rootView, id);
      if (transactionUpdateContent == null) {
        break missingId;
      }

      id = R.id.transactionUpdateDate;
      EditText transactionUpdateDate = ViewBindings.findChildViewById(rootView, id);
      if (transactionUpdateDate == null) {
        break missingId;
      }

      id = R.id.transactionUpdateDescription;
      EditText transactionUpdateDescription = ViewBindings.findChildViewById(rootView, id);
      if (transactionUpdateDescription == null) {
        break missingId;
      }

      id = R.id.transactionUpdateName;
      EditText transactionUpdateName = ViewBindings.findChildViewById(rootView, id);
      if (transactionUpdateName == null) {
        break missingId;
      }

      id = R.id.transactionUpdateReference;
      EditText transactionUpdateReference = ViewBindings.findChildViewById(rootView, id);
      if (transactionUpdateReference == null) {
        break missingId;
      }

      id = R.id.transactionUpdateTitleAndButtonBack;
      LinearLayout transactionUpdateTitleAndButtonBack = ViewBindings.findChildViewById(rootView, id);
      if (transactionUpdateTitleAndButtonBack == null) {
        break missingId;
      }

      return new ActivityTransactionUpdateBinding((RelativeLayout) rootView,
          transactionUpdateAccountSpinner, transactionUpdateAmount, transactionUpdateButtonGoBack,
          transactionUpdateButtonSave, transactionUpdateCategorySpinner, transactionUpdateContent,
          transactionUpdateDate, transactionUpdateDescription, transactionUpdateName,
          transactionUpdateReference, transactionUpdateTitleAndButtonBack);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
